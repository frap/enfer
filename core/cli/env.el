;;; core/cli/env.el -*- lexical-binding: t; -*-

(dispatcher! env
  (let ((env-file (abbreviate-file-name enfer-env-file)))
    (pcase (car args)
      ((or "refresh" "re")
       (enfer-reload-env-file 'force))
      ((or "enable" "auto")
       (setenv "ENFERENV" "1")
       (print! (green "Enabling auto-reload of %S") env-file)
       (enfer-reload-env-file 'force)
       (print! (green "Done! `enfer refresh' will now refresh your envvar file.")))
      ("clear"
       (setenv "ENFERENV" nil)
       (unless (file-exists-p env-file)
         (user-error "%S does not exist to be cleared" env-file))
       (delete-file env-file)
       (print! (green "Disabled envvar file by deleting %S") env-file))
      (_
       (print! "%s\n\n%s"
               (bold (red "No valid subcommand provided."))
               "See `enfer help env` to see available commands."))))
  "Manages your envvars file.

  env [SUBCOMMAND]

Available subcommands:

  refresh  Create or regenerate your envvar file
  auto     enable auto-reloading of your envvars file (on `enfer refresh`)
  clear    deletes your envvar file (if it exists) and disables auto-reloading

An envvars file (its location is controlled by the `enfer-env-file' variable)
will contain a list of environment variables scraped from your shell environment
and loaded when Enfer starts (if it exists). This is necessary when Emacs can't
be launched from your shell environment (e.g. on MacOS or certain app launchers
on Linux).

To generate a file, run `enfer env refresh`. If you'd like this file to be
auto-reloaded when running `enfer refresh`, run `enfer env enable` instead (only
needs to be run once).")


;;
;; Helpers

(defvar enfer-env-ignored-vars
  '("PWD"
    "PS1"
    "PROMPT"
    "RPROMPT"
    "DBUS_SESSION_BUS_ADDRESS"
    "GPG_AGENT_INFO"
    "SSH_AGENT_PID"
    "SSH_AUTH_SOCK"
    ;; Enfer envvars
    "INSECURE"
    "DEBUG"
    "YES")
  "Environment variables to not save in `enfer-env-file'.

Each string is a regexp, matched against variable names to omit from
`enfer-env-file'.")

(defvar enfer-env-executable
  (if IS-WINDOWS
      "set"
    (executable-find "env"))
  "The program to use to scrape your shell environment with.
It is rare that you'll need to change this.")

(defvar enfer-env-switches
  (if IS-WINDOWS
      "-c"
    "-ic") ; Execute in an interactive shell
  "The `shell-command-switch'es to use on `enfer-env-executable'.
This is a list of strings. Each entry is run separately and in sequence with
`enfer-env-executable' to scrape envvars from your shell environment.")

;; Borrows heavily from Spacemacs' `spacemacs//init-spacemacs-env'.
(defun enfer-reload-env-file (&optional force-p)
  "Generates `enfer-env-file', if it doesn't exist (or if FORCE-P).

This scrapes the variables from your shell environment by running
`enfer-env-executable' through `shell-file-name' with `enfer-env-switches'. By
default, on Linux, this is '$SHELL -ic /usr/bin/env'. Variables in
`enfer-env-ignored-vars' are removed."
  (when (or force-p (not (file-exists-p enfer-env-file)))
    (with-temp-file enfer-env-file
      (message "%s envvars file at %S"
               (if (file-exists-p enfer-env-file)
                   "Regenerating"
                 "Generating")
               (abbreviate-file-name enfer-env-file))
      (let ((process-environment enfer-site-process-environment))
        (insert
         (concat
          "# -*- mode: dotenv -*-\n"
          (format "# Generated with: %s %s %s\n"
                  shell-file-name
                  enfer-env-switches
                  enfer-env-executable)
          "# ---------------------------------------------------------------------------\n"
          "# This file was auto-generated by `enfer env refresh'. It contains a list of\n"
          "# environment variables scraped from your default shell (excluding variables\n"
          "# blacklisted in enfer-env-ignored-vars).\n"
          "#\n"
          "# It is NOT safe to edit this file. Changes will be overwritten next time that\n"
          "# `enfer env refresh` is executed. Alternatively, create your own env file and\n"
          "# load it with `(enfer-load-env-vars FILE)`.\n"
          "#\n"
          "# To auto-regenerate this file when `enfer reload` is run, use `enfer env auto' or\n"
          "# set ENFERENV=1 in your shell environment/config.\n"
          "# ---------------------------------------------------------------------------\n\n"))
        (let ((shell-command-switch enfer-env-switches))
          (message "Scraping env from '%s %s %s'"
                   shell-file-name
                   shell-command-switch
                   enfer-env-executable)
          (save-excursion
            (insert (shell-command-to-string enfer-env-executable)))
          ;; Remove undesireable variables
          (dolist (regexp enfer-env-ignored-vars)
            (save-excursion
              (when (re-search-forward (format "\n\\(%s+\\)=" regexp) nil t)
                (let ((var (match-string 1)))
                  (message "Ignoring %s" var)
                  (delete-region
                   (match-beginning 0)
                   (1- (or (save-excursion
                             (when (re-search-forward "^\\([^= ]+\\)=" nil t)
                               (line-beginning-position)))
                           (point-max))))))))
          (print! (green "Envvar successfully generated")))))))
